### D2RQ MAPPING SCRIPT FOR THE SOFTWARE TABLE ####
## WE INCLUDE THE ONTOLOGIES WE NEED

@prefix map: <> .
@prefix roo:<http://www.cancerdata.org/roo/>.
@prefix ncit:<http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .
@prefix ro:<http://www.radiomics.org/RO/>.
@prefix swo:<http://www.ebi.ac.uk/swo/>.
@prefix obo:<http://purl.obolibrary.org/obo/>.

# we need to specify where are our data. We have different tables

map:database a d2rq:Database;
	d2rq:jdbcDriver "org.postgresql.Driver";
	d2rq:jdbcDSN "jdbc:postgresql://localhost:5432/Radiomics_Ontology";
	d2rq:username "postgres";
	d2rq:password "postgres";
	.
# Software table

#mapping the concept of software (this is the link to calculation run table,so same URI)

map:software_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "software_@@softwaretable.software@@";
	d2rq:class swo:SWO_0000001;
	.


#mapping software label

map:software_label a d2rq:PropertyBridge;
 d2rq:belongsToClassMap map:software_obj;
 d2rq:property rdfs:label;
 d2rq:pattern "software #@softwaretable.softwarelabel@@";
 d2rq:datatype xsd:String;
 .


#mapping the concept of software version

map:version_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "version_@@softwaretable.versionname@@";
	d2rq:class obo:IAO_0000129;
	.

#mapping the predicate has_version (SW has_version)

map:hasversion a d2rq:PropertyBridge;
 	d2rq:belongsToClassMap map:software_obj;
	d2rq:refersToClassMap  map:version_obj;
	d2rq:property ro:P00101;
	.

#mapping the concept programmingLanguage

map:programminglanguage_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "programminglanguage_@@softwaretable.programminglanguage@@";
	.

#mapping the predicate has_programming_language (SW has_programming_language)

map:hasprogramminglanguage a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:software_obj;
	d2rq:refersToClassMap map:programminglanguage_obj;
	d2rq:property ro:P00082;
	.

#link to the programming language concept in the ontology

map:programminglanguage_uri a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:programminglanguage_obj;
	d2rq:property rdf:type;
	d2rq:uriColumn "softwaretable.programminglanguage";
	d2rq:translateWith map:programmingMapping;
	.

# we need to use a translation table, since we have different programming languages

map:programmingMapping a d2rq:TranslationTable;
	d2rq:translation [d2rq:databaseValue "Python"; d2rq:rdfValue ro:I0023; ];
	d2rq:translation [d2rq:databaseValue "Matlab2018a"; d2rq:rdfValue ro:I0017; ];
	d2rq:translation [d2rq:databaseValue "C"; d2rq:rdfValue ro:I006;	    ];
	d2rq:translation [d2rq:databaseValue "C++"; d2rq:rdfValue ro:I007;	    ];
	.

#mapping the concept of institution

map:institution_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "institution_@@softwaretable.institution@@";
	d2rq:class ro:P235;
	.
	
#mapping institution label
map:institutionlabel a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:institution_obj;
	d2rq:property rdfs:label;
	d2rq:sqlExpression "softwaretable.institution";
	d2rq:datatype xsd:String;
	.
	
#mapping the predicate developed_by

map:developedby a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:software_obj;
	d2rq:refersToClassMap  map:institution_obj;
	d2rq:property ro:P00011;
	.

