### D2RQ MAPPING SCRIPT FOR THE discretisation PARAMETER TABLE ####

## WE INCLUDE THE ONTOLOGIES WE NEED

@prefix map: <> .
@prefix roo:<http://www.cancerdata.org/roo/>.
@prefix ncit:<http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .
@prefix ro:<http://www.radiomics.org/RO/>.


# we need to specify where are our data. We have different tables

map:database a d2rq:Database;
	d2rq:jdbcDriver "org.postgresql.Driver";
	d2rq:jdbcDSN "jdbc:postgresql://localhost:5432/Radiomics_Ontology";
	d2rq:username "postgres";
	d2rq:password "postgres";
	.


# TABLE discretisation

#mapping the concept of discretisation parameter (SAME URI AS IN FEATURE PARAMETER SPACE TABLE)

map:discretisationparameter_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "discretisation_@@discretisationtable.discretisation@@";
	d2rq:class ro:8QU8;
	.


#mapping the concept of equalisation

map:equalisation_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:condition "discretisationtable.equalisationbins IS NOT NULL";
	d2rq:uriPattern "equalisation_@@discretisationtable.discretisation@@";
	d2rq:class ro:17X7;
	.


#mapping the predicate has_equalisation

map:equalisation_predicate a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:discretisationparameter_obj;
	d2rq:refersToClassMap map:equalisation_obj;
	d2rq:property ro:P9124215;
	.

# mapping equalisation value

map:equalisationvalue a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:equalisation_obj;
	d2rq:property roo:100042; #has_value
    d2rq:sqlExpression "discretisationtable.equalisationbins";
	d2rq:datatype xsd:double;
	.

# mapping the concept of algorithm

map:algorithm_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:condition "discretisationtable.algorithm IS NOT NULL";
	d2rq:uriPattern "discretisationalgorithm_@@discretisationtable.algorithm@@";
	.


map:algorithm_uri a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:algorithm_obj;
	d2rq:property rdf:type;
	d2rq:uriColumn "discretisationtable.algorithm";
	d2rq:translateWith map:algorithmMapping;
	.

map:algorithmMapping a d2rq:TranslationTable;
	d2rq:translation [ d2rq:databaseValue "FBN"; d2rq:rdfValue ro:K15C; ];
	d2rq:translation [ d2rq:databaseValue "FBS"; d2rq:rdfValue ro:Q3RU; ];
	d2rq:translation [ d2rq:databaseValue "LM"; d2rq:rdfValue ro:SSX6; ];
	d2rq:translation [ d2rq:databaseValue "FBNequal"; d2rq:rdfValue ro:MV01; ];
	d2rq:translation [ d2rq:databaseValue "FBSequal"; d2rq:rdfValue ro:MV00; ];
	
	.

# predicate has_algorithm


map:has_algorithm_predicate a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:discretisationparameter_obj;
	d2rq:refersToClassMap map:algorithm_obj;
	d2rq:property ro:P0295212521;
	.


# algorithm has_value

map:algorithmvalue a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:algorithm_obj;
	d2rq:property roo:100042; #has_value
    d2rq:sqlExpression "discretisationtable.algorithmvalue";
	d2rq:datatype xsd:double;
	.

# mapping the unit

#mapping the concept of unit

map:unit_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:condition "discretisationtable.algorithmunit IS NOT NULL";
	d2rq:uriPattern "unit_@@discretisationtable.algorithm@@";
	.

map:unit_uri a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:unit_obj;
	d2rq:property rdf:type;
    d2rq:uriColumn "discretisationtable.algorithmunit";
	d2rq:translateWith map:unitMapping;
	.

#mapping the translations between unit names and concept in the ontology

map:unitMapping a d2rq:TranslationTable;
    d2rq:translation [ d2rq:databaseValue "cm"; d2rq:rdfValue ro:I008; ];
    d2rq:translation [ d2rq:databaseValue "mm"; d2rq:rdfValue ro:I0020; ];
    d2rq:translation [ d2rq:databaseValue "mm(2)"; d2rq:rdfValue ro:I0027; ];
    d2rq:translation [ d2rq:databaseValue "cm(2)"; d2rq:rdfValue ro:I0024; ];
    d2rq:translation [ d2rq:databaseValue "m(2)"; d2rq:rdfValue ro:I0025;];
    d2rq:translation [ d2rq:databaseValue "mm(3)"; d2rq:rdfValue ro:I0011; ];
    d2rq:translation [ d2rq:databaseValue "cm(3)"; d2rq:rdfValue ro:I0025; ];
    d2rq:translation [ d2rq:databaseValue "SUV"; d2rq:rdfValue ro:I98213; ];
    d2rq:translation [ d2rq:databaseValue "HU"; d2rq:rdfValue ro:I0012; ];
    d2rq:translation [ d2rq:databaseValue "SUV(2)"; d2rq:rdfValue ro:I98683; ];
    d2rq:translation [ d2rq:databaseValue "HU(2)"; d2rq:rdfValue ro:I9482135; ];
    d2rq:translation [ d2rq:databaseValue "mm(2/3)"; d2rq:rdfValue ro:I9286638; ];
    d2rq:translation [ d2rq:databaseValue "mm(3)*SUV"; d2rq:rdfValue ro:I0883245; ];
    d2rq:translation [ d2rq:databaseValue "mm(3)*HU"; d2rq:rdfValue ro:I9826512313; ];
    .



#mapping the predicate has_unit

map:unitpredicate a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:algorithm_obj;
    d2rq:property roo:100027; # has_unit
    d2rq:refersToClassMap map:unit_obj;
    .


# mapping the concept of min value

map:min_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:condition "discretisationtable.discretisationminvalue IS NOT NULL";
	d2rq:uriPattern "discretisationmin_@@discretisationtable.discretisation@@"; 
	d2rq:class ro:5BEO;
	.

#mapping the predicate has_min

map:min_predicate a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:algorithm_obj;
	d2rq:refersToClassMap map:min_obj;
	d2rq:property ro:P00064; #has_min
	.

#mapping the predicate min has_value

map:min_value a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:min_obj;
	d2rq:property roo:100042; #has_value
    d2rq:sqlExpression "discretisationtable.discretisationminvalue";
	d2rq:datatype xsd:double;
	.
	
#mapping the concept of  discretisation min unit

map:minunit_obj a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:condition "discretisationtable.discretisationminunit IS NOT NULL";
	d2rq:uriPattern "minunit_@@discretisationtable.discretisation@@";
	.

map:minunit_uri a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:minunit_obj;
	d2rq:property rdf:type;
    d2rq:uriColumn "discretisationtable.discretisationminunit";
	d2rq:translateWith map:unitMapping;
	.

#mapping the translations between unit names and concept in the ontology

map:unitMapping a d2rq:TranslationTable;
    d2rq:translation [ d2rq:databaseValue "cm"; d2rq:rdfValue ro:I008; ];
    d2rq:translation [ d2rq:databaseValue "mm"; d2rq:rdfValue ro:I0020; ];
    d2rq:translation [ d2rq:databaseValue "mm(2)"; d2rq:rdfValue ro:I0027; ];
    d2rq:translation [ d2rq:databaseValue "cm(2)"; d2rq:rdfValue ro:I0024; ];
    d2rq:translation [ d2rq:databaseValue "m(2)"; d2rq:rdfValue ro:I0025;];
    d2rq:translation [ d2rq:databaseValue "mm(3)"; d2rq:rdfValue ro:I0011; ];
    d2rq:translation [ d2rq:databaseValue "cm(3)"; d2rq:rdfValue ro:I0025; ];
    d2rq:translation [ d2rq:databaseValue "SUV"; d2rq:rdfValue ro:I98213; ];
    d2rq:translation [ d2rq:databaseValue "HU"; d2rq:rdfValue ro:I0012; ];
    d2rq:translation [ d2rq:databaseValue "SUV(2)"; d2rq:rdfValue ro:I98683; ];
    d2rq:translation [ d2rq:databaseValue "HU(2)"; d2rq:rdfValue ro:I9482135; ];
    d2rq:translation [ d2rq:databaseValue "mm(2/3)"; d2rq:rdfValue ro:I9286638; ];
    d2rq:translation [ d2rq:databaseValue "mm(3)*SUV"; d2rq:rdfValue ro:I0883245; ];
    d2rq:translation [ d2rq:databaseValue "mm(3)*HU"; d2rq:rdfValue ro:I9826512313; ];
    .

#mapping the predicate has_unit

map:minunitpredicate a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:min_obj;
    d2rq:property roo:100027; # has_unit
    d2rq:refersToClassMap map:minunit_obj;
    .


